name: CI General Assignment

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Загружаем репозиторий на виртуальную машину
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3 # Установка SDK для сборки, тестирования проекта
        with:
          dotnet-version: '6.0.x'

      - name: Restore NuGet
        run: dotnet restore WpfApp.sln # Восстановление пакетов NuGet
      
      - name: Build app
        run: dotnet build WpfApp/WpfApp.csproj # Собираем приложение

  testing-combined:  
    runs-on: windows-latest
    needs: build # Выполняется последовательно после успешного выполнения build
    strategy:
      matrix:
        configuration: [Debug, Release] # Тестируем приложение сначала как Debug, а потом Release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Загружаем репозиторий на виртуальную машину

      - name: Setup .NET
        uses: actions/setup-dotnet@v3 # Установка SDK для сборки, тестирования проекта
        with:
          dotnet-version: '6.0.x'

      - name: Restore NuGet
        run: dotnet restore WpfApp.sln # Восстановление пакетов NuGet

      - name: Test app
        run: dotnet test UnitTestProject1/UnitTestProject1.csproj --configuration ${{ matrix.configuration }} # Тестируем приложение

      - run: echo "Тестирование прошло успешно!"

  analysis:  
    runs-on: ubuntu-latest
    needs: build # Если хотите, чтобы анализ выполнялся после сборки
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Загружаем репозиторий на виртуальную машину

      - name: Inspect code
        uses: nbadal/inspectcode-action
        with:
          solution: 'WpfApp.sln'

      - run: echo "Анализ кода прошёл успешно!"
